.basic-form
  = fields_for :payment, payment do |p|
    = p.error_messages
    table.gray.lform.vmiddle
      tr
        td.bold Company
        td
          .bold.icon-text
            i.fa.fa-building-o
            = payment.company.name
          = p.hidden_field :company_id
      tr
        td = p.label :payment_method_id, 'Payment Method'
        td
          = p.select :payment_method_id, PaymentMethod.names_and_ids, {include_blank: true}, {class: "lfloat #{@accounts_type.downcase} unobservable"}
          = p.label :number, 'Number', class: 'lfloat ml10'
          = p.text_field :number, :disabled => (((@accounts_type == 'Payable') && (payment.payment_method_id == PaymentMethod.check.id)) ? true : false), class: "ml10 unobservable"
          - if(controller.crud_class.to_s == 'PayablePayment')
            - info = "You'll have to introduce the check number after printing"
            #check_drop_down.ml10[style="display:#{payment.payment_method_id == PaymentMethod.check.id ? '' : 'none'}"] #{info}
      tr
        td = p.label :issue_date, 'Date'
        td = p.text_field :issue_date, value: (@payment.issue_date.ymd rescue nil), class: 'date_picker unobservable', data: { sync: '#payment_date_received' }
      tr
        - if in_receivable?
          td = p.label :date_received, 'Received Date'
          td = p.text_field :date_received, class: 'date_picker unobservable'

      - if ['edit', 'update'].include?(controller.action_name)
        tr
          td = p.label :cleared_date, 'Cleared Date'
          td = p.text_field :cleared_date, class: 'date_picker unobservable', minDate: Time.now.prev_year.beginning_of_year.ymd, maxDate: Time.now.next_year.end_of_year.ymd
      tr
        td = p.label :comments, 'Comments'
        td = p.text_area :comments, rows: 5, cols: 40, class: 'unobservable'
      tr
        td = p.label :amount, 'Amount'
        td = p.text_field :amount, size: 12, readonly: in_payable?
