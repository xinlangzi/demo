class Api::Quote
  def self.calculate_discount(container, params, distance_btn_consignee_shipper, amount)
    case
    when container.appt_date.blank?
      [50, "The import container does not yet have an appointment date, so there can only be a flat discount of $50."]
    when container.appt_date < params[:export_appt_date].to_date
      [50, "The appointment date of the export container is later than that of the import container, so there can only be a flat discount of $50."]
    when distance_btn_consignee_shipper > 150
      [50, "The distance between the import consignee and the export shipper is greater than 150 miles, so there can only be a flat discount of $50."]
    when amount < 300
      [50, "The undiscounted rate is so low that there can only be a flat discount of $50."]
    when amount < 500
      [50 + (amount - 300) * 30 / 200, nil]
    else
      [80 + (amount - 500) * 20 / 500, nil]
    end
  end

  def self.create(params)
    container = ImportContainer.find(params[:container_id])
    consignee = container.consignees_or_shippers_info.first
    distance_btn_consignee_shipper = GoogleMap.distance("#{consignee.lat},#{consignee.lng}", params[:zip]) / 1609.344
    formatted_address = GoogleMap.geocode_to_json(params[:zip])["results"].first["formatted_address"]

    params[:terminals].map{|terminal_name|
      rail_road = RailRoad.find_by_name(terminal_name)
      distance = GoogleMap.distance("#{rail_road.lan},#{rail_road.lon}", params[:zip])
      if distance > 0
        sq = SpotQuote.create!({
          rail_road_id: rail_road.id,
          ssline_id: container.ssline.id,
          meters: distance * 2, #round trip
          dest_address: formatted_address,
          triaxle: params[:chassis_type] == "triaxle",
          live_load: true,
          container_type_id: container.container_type_id,
          container_size_id: container.container_size_id,
          private_comment: "generated by modalmatch.com: street turn for import container #{container.id}",
        })

        discount, comment = calculate_discount(container, params, distance_btn_consignee_shipper, sq.total_without_drop_pull)

        sq.update_attributes!(
          q_free_text1: -discount.round(2),
          free_text1: "Street Turn discount"
        )

        {
          id: sq.id,
          terminal: terminal_name,
          miles: sq.miles.to_f,
          base_rate_fee: sq.base_rate_fee,
          fuel_amount: sq.fuel_amount,
          fuel_percent: sq.percent_fuel,
          triaxle_fee: sq.over1,
          rail_lift_fee: sq.over2,
          chassis_fee: sq.chassis_fee,
          chassis_dray: sq.chassis_dray,
          reefer_fee: sq.reefer_fee,
          total_before_discount: (sq.total_without_drop_pull.to_f - sq.q_free_text1.to_f).round(2),
          street_turn_discount: sq.q_free_text1,
          total_after_discount: sq.total_without_drop_pull,
          comment: comment
        }
      end
    }.compact
  end
end
